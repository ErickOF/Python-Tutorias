# -*- coding: utf-8 -*-
"""01 - Sintaxis básica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DYvryR3xkOPkbsP1EBV1BuOhwAVoICUS

# **Identificadores**

* Nombre usado para identificar variables, funciones, clases, módulos u otros objetos
* Comienzan con una letra de la "A" a la "Z" (minúscula o mayúscula) o un guión bajo (_) seguido de cero o más letras, guiones bajos y dígitos (del 0 al 9)
* No permite caracteres especiales dentro de los identificadores
* Es sensible a mayúsculas y minúsculas. *Variable* y *variable* son dos identificadores diferentes

### **Uso incorrecto**
"""

# Commented out IPython magic to ensure Python compatibility.
# %numero

@letra

$variable

2_variable

"""### **Uso correcto**"""

numero: int

numero2: float

_letra: str

numeroDeHijos: int

numero_de_primos: int

"""# **Convenciones de nombres para identificadores**

* Los nombres de clases comienzan con una letra mayúscula
* Todos los demás identificadores comienzan con una letra minúscula
* Iniciar un identificador con un solo guión bajo indica que el identificador es privado
* Iniciar un identificador con dos guiones bajos indica un fuerte identificador privado

# **Palabras reservadas**
* Palabras reservadas y no pueden usarse como constantes o variables ni como nombre de identificador. Solo contienen letras minúsculas

![texto alternativo](http://www.computingnerds.com/pictures/reserved.jpg)

# **Líneas e indentación**
* Python no usa llaves ({}) para indicar bloques de código, para definiciones de clases y funciones o control de flujo
* Bloques de código se denotan por indentación de línea, que se aplica estrictamente
* El número de espacios en la indentación es variable, pero todas las declaraciones dentro del bloque deben indentarse en la misma cantidad
"""

var = 50

if var < 100:
    print('Menor que 100')
else:
    print('Mayor que 100')

"""# **Declaraciones en múltiples líneas**
* Las declaraciones terminan con una nueva línea
* Python, permite el uso del carácter de continuación de línea (\) para indicar que la línea debe continuar
"""

total = item1 + \
        item2 + \
        item3

total = 1 + \
        2 + \
        3
total

"""* Las instrucciones contenidas dentro de los corchetes [], {} o () no necesitan usar el carácter de continuación de línea
* Si contienen muchos elementos podría separarse para una mejor lectura
"""

dias = ['Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado', 'Domingo']

numeros = [[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]]

"""# **Uso de las comillas**
* Se aceptan comillas simples ('), dobles (") y triples (''' o ''') para denotar cadenas de texto
* Siempre el mismo tipo de comillas comienza y finaliza la cadena
* Las comillas triples se utilizan para abarcar la cadena en múltiples líneas
"""

palabra = 'palabra'

oracion = "Esto es una oracion"

parrafo = """Esto es un parrafo.
Esta hecho con mutiples oraciones."""

"""# **Comentarios**
* Un signo de hash (#), que no esté dentro de comillas, es el comienzo de un comentario
* Todos los caracteres después del #, hasta el final de la línea física, son parte del comentario y el intérprete de Python los ignora
"""

# Esto es un comentario
variable = 20 # Esto tambien es un comentario
"""
Esto es un comentario multilinea
Puede escribir en distintas lineas
Sin que marque error
"""