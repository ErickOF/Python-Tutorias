# -*- coding: utf-8 -*-
"""02 - Tipos de Datos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16YJ7PRtvaNh95kKrHS7NkiwHbhJ8vZyM

# **Tipos de Datos**

* Ubicaciones de memoria reservadas para almacenar valores
* Cuando se crea una variable se reserva espacio en la memoria
* Según tipo de dato de la variable, el intérprete asigna memoria y decide qué se puede almacenar en la memoria reservada
* Al asignar diferentes tipos de datos a las variables, puede almacenar enteros, decimales o caracteres en estas
"""

contador = 100
kilometros = 1000
nombre = 'John'

"""# **Asignación múltiple**

* Permite asignar un solo valor a distintas variables simultáneamente
"""

a = b = c = 1

"""* Se puede asignar múltiples objetos a múltiples variables"""

a, b, c = 1, 2, 'John'

"""# **Tipos de datos estándar**
* Datos almacenados en la memoria pueden ser de muchos tipos
* Se utilizan para definir las operaciones posibles en ellos y el método de almacenamiento
* Tiene cinco tipos de datos estándar:
    * Números
    * Cadenas
    * Lista
    * Tuplas
    * Diccionario

# **Números en Python**
* Almacenan valores numéricos
* Objetos numéricos se crean cuando les asigna un valor
* Se puede eliminar la referencia a un objeto numérico utilizando la instrucción "del".
* Se puede eliminar uno o varios objetos utilizando la instrucción “del”
"""

var1 = 1
var2 = 10

var1

var2

var_a = 1
var_b = 2

var_a

var_b

del var1
del var2

var1

var2

del var_a, var_b

var_a

var_b

"""* Tres tipos numéricos diferentes:
    * *int* (enteros con signo)
    * *float* (valores reales de coma flotante)
    * *complex* (números complejos)
* Todos los enteros se representan como enteros largos.
* Número complejo consiste en par ordenado de números reales denotados por $x + yj$ ($x$, $y$ números reales, $j$ unidad imaginaria)
"""

numero: int

numero

numero = 20
numero

numeroEntero: int
numeroDecimal: float
numeroComplejo: complex

numeroEntero = 50
numeroEntero

numeroDecimal = 25.67
numeroDecimal

numeroComplejo = 2 + 5.6j
numeroComplejo

"""# **Cadenas de Python**
* Cadenas se identifican como un conjunto contiguo de caracteres representados entre comillas
* Cualquier par de comillas (simples o dobles)
* Subconjuntos de cadenas o subcadenas pueden tomarse con el operador de slice ([] y [:])
* Índices comienzan en 0
* Llegan hasta -1
* El signo más (+) operador de concatenación
* El asterisco (*) operador de repetición
"""

cadena = 'Hola mundo'

cadena[0]

cadena[2:5]

cadena[2:]

cadena * 2

cadena + " Prueba"

"""# Listas de Python
* Tipos de datos compuestos más versátiles de Python
* Contiene elementos separados por comas y encerrados entre corchetes ([])
* Son similares a los arrays en C
* Todos los elementos que pertenecen pueden ser de tipos de datos diferentes
* Se puede acceder a los valores utilizando el operador de división ([] y [:])
* Índices comienzan en 0
* Llegan hasta -1
* El signo más (+) operador de concatenación
* El asterisco (*) operador de repetición
"""

lista = ['abcd', 786, 2.23, 'John', 70.2]
minilista = [123, 'John']

lista

lista[0]

lista[1:3]

lista[2:]

minilista * 2

lista + minilista

"""## Tuplas de Python
* Tipo de datos de secuencia
* Similar a la lista
* Serie de valores separados por comas
* Diferencia con las listas:
* Se incluyen entre paréntesis
* Son inmutables
* Se pueden considerar listas de solo lectura
"""

tupla = ('abcd', 786, 2.23, 'John', 70.2)
minitupla = (123, 'John')

tupla

tupla[0]

tupla[1:3]

tupla[2:]

minitupla * 2

tupla + minitupla

"""* El siguiente código no es válido con tuplas, porque intentamos actualizar una tupla, algo que no está permitido
* Caso similar es posible con listas
"""

tupla[2] = 1000

lista[2] = 1000

lista

"""## Diccionarios de Python
* Tipo de tabla hash
* Funcionan como arreglos asociativos o hashes encontrados en Perl
* Consisten en pares clave-valor
* La clave:
    * puede ser casi cualquier tipo de dato
    * generalmente son números o cadenas
* Los valores pueden ser cualquier objeto arbitrario de Python
* Los diccionarios están encerrados con llaves ({})
* Valores pueden asignarse y accederse usando llaves cuadradas ([])
* No tienen ningún concepto de orden entre los elementos
"""

diccionario = {}
diccionario

diccionario['one'] = 'Esto es uno'
diccionario

diccionario[2] = 'Esto es dos'
diccionario

minidiccionario = {'name': 'john', 'code': 6734, 'dept': 'sales'}
minidiccionario

diccionario['one']

diccionario[2]

minidiccionario

minidiccionario.keys()

minidiccionario.values()