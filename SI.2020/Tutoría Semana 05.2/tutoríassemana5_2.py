# -*- coding: utf-8 -*-
"""TutoríasSemana5.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cAP-xpgkHuJS1BdOCqvVlatNOC7QCvOs

# Ciclo While

```python
while (condicion): # Si la condicion se cumple, el ciclo se ejecuta
    # Bloque de codigo
```
"""

contador = 0

while (contador <= 10):
    print(contador)
    contador = contador + 1 # contador += 1

contador = 10

while (contador >= 0):
    print(contador)
    contador = contador - 1 # contador -= 1

contador = 0

while (contador <= 10):
    if (contador % 2 == 0):
        print(contador)
    contador = contador + 1

# Tablas de multiplicar
num = 1
mult = 1

while num <= 12:
    while mult <= 12:
        print('{} x {} = {}'.format(num, mult, num * mult))
        mult += 1 # mult = mult + 1
    num += 1 # num = num + 1
    mult = 1
    print()

# Valide si un numero es primo
numero = int(input('Ingrese un numero: '))

def esPrimo(num):
    if (num < 2):
        return False

    div = 2

    while (div < num):
        if (num % div == 0):
            return False
        div += 1
    return True

if esPrimo(numero): # esPrimo(numero) == True
    print('El numero es primo')
else:
    print('El numero no es primo')

"""# Ciclo **for**

* **Forma 1**
* $i = 0$
* se ejecuta mientras $i < final$
* $i = i + 1$

```python
for i in range(final):
    # Codigo
```
"""

for i in range(10):
    print(i)

"""* **Forma 2**
* $i = inicial$
* se ejecuta mientras $i < final$
* $i = i + 1$

```python
for i in range(inicial, final):
    # Bloque de codigo
```
"""

for i in range(20, 30):
    print(i)

for i in range(20, 30):
    if (i % 2 == 0):
        print(i)

"""* **Forma 3**
* $i = inicial$
* se ejecuta mientras $i < final$
* $i = i + paso$

```python
for i in range(inicial, final, paso):
    # Bloque de codigo
```
"""

for i in range(0, 20, 2):
    print(i)

inicial = 0
final = 20
paso = 5

for num in range(inicial, final + 1, paso):
    print(num)

i = 10

for i in range(0, 20, 5):
    print(i)

i = 2

for i in range(10):
    print(i)

for num in range(-30, 30, 5):
    print(num)

for num in range(10, 0, -1):
    print(num)

"""# Forma 4"""

cadena = 'Erick'

for c in cadena:
    print(c)

numeros = [1, 2, 3, 4, 5]

for num in numeros:
    print(num)

numeros = [1, 2, 3, 4, 5]
pares = []

for num in numeros:
    if num % 2 == 0:
        pares.append(num)

print(pares)

tupla = (1, 2, 3, 4, 5, 6)

for num in tupla:
    print(num)

diccionario = {'Hello': 'Hola', 'One': 'Uno', 'Bird': 'Pajaro', 'Book': 'Libro'}

for var in diccionario:
    print(var)

diccionario = {'Hello': 'Hola', 'One': 'Uno', 'Bird': 'Pajaro', 'Book': 'Libro'}

for valor in diccionario.keys():
    print(valor)

diccionario = {'Hello': 'Hola', 'One': 'Uno', 'Bird': 'Pajaro', 'Book': 'Libro'}

for valor in diccionario.values():
    print(valor)

diccionario = {'Hello': 'Hola', 'One': 'Uno', 'Bird': 'Pajaro', 'Book': 'Libro'}

for llave in diccionario:
    print(llave, diccionario[llave])

diccionario = {'Hello': 'Hola', 'One': 'Uno', 'Bird': 'Pajaro', 'Book': 'Libro'}

for item in diccionario.items(): # (Llave, valor)
    print(item)

diccionario = {'Hello': 'Hola', 'One': 'Uno', 'Bird': 'Pajaro', 'Book': 'Libro'}

for (llave, valor) in diccionario.items(): # (Llave, valor)
    print(llave, valor)

for num1 in range(1, 13): # 
    for num2 in range(1, 13): # Termina ejecucion primero
        print(num1, 'x', num2, '=', num1 * num2)
    print()

inicio = int(input('Inicio: '))
final = int(input('Final: '))

for num in range(inicio, final + 1):
    print(num)

"""# Secuencias

## Listas
[Todos los métodos de la lista](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists)
"""

lista = [] # Vacia
lista = [1, 2, 3, 4] # Cuatro elementos
lista[0]

lista[-1]

lista[6]

lista[-10]

# Agrega un objeto a la lista, al final
lista.append(15)
lista

# Se agrega un objeto a la lista insert(pos, elemento)
lista.insert(0, 100)
lista

lista.insert(-1, 500)
lista

# len -> me da el tamaño de la lista
lista.insert(len(lista), 10000)
lista

# pop -> Elimina el elemento en la posicion j: me devuelve el objeto
# lista.pop(j)
eliminado = lista.pop() # El ultimo
print(eliminado, lista)

eliminado = lista.pop(0) # El primero
print(eliminado, lista)

# lista.remove(obj) -> Elimina el obj
lista.remove(1)
lista

lista = [1, 2, 3, 4, 5, 10, 10, 2, 10]
lista

# lista.remove(obj) -> Elimina el obj
# Cuando hay repetido, elimina la primer aparicion
lista.remove(10) # No devuelve nada
lista

lista = [1, 2, 3, 4]
lista = []
lista

lista = [1, 2, 3, 4]
lista.clear() # Elimina todos los elementos de la lista
lista

# lista.count(obj) -> La cantidad de veces que aparece obj en la lista
lista = [1, 2, 3, 1, 1, 5, 7]
lista.count(1)

lista.count(7)

lista.count(10000)

# contar pares
lista = [1, 3, 6, 7, 7, 2, 5, 6, 2]
cantidad = 0

for num in lista:
    if num % 2 == 0:
        cantidad += 1
cantidad

# lista.index(obj, inicio=0) -> Devuelve la posicion de la primera aparicion de obj en la lista
lista = [1, 2, 3, 1, 1, 5, 7, 1]
lista.index(1, 5)

lista.index(100)

# lista.sort() -> Ordena la lista en forma asc
lista = [8, 2, 5, 1, 7, 4, 8]
lista.sort()
lista

# lista.sort(reverse=True) -> Ordena la lista en forma desc
lista = [8, 2, 5, 1, 7, 4, 8]
lista.sort(reverse=True)
lista

# sorted(seq) -> ordenada
lista = [8, 2, 5, 1, 7, 4, 8]
lista = sorted(lista, reverse=True)
lista

lista = [1, 2, 3, 4]
lista2 = lista
lista[0] = 1000
lista2

# lista.copy() -> Devuelve una copia de la lista
lista = [1, 2, 3, 4]
lista2 = lista.copy()
lista[0] = 1000
lista2

lista = [1, 2, 3, 4]
lista2 = lista[:] # lista[inicio:fin], lista[:fin], lista[inicio:], lista[:]
lista[0] = 1000
lista2

"""Más información sobre la librería [random](https://docs.python.org/3/library/random.html)"""

import random

lista = []

for i in range(10):
    # Numeros aleatorios entre 0 y 100
    lista.append(random.randint(0, 100))

lista

# lista[inicio:fin] -> desde inicio hasta un elemento antes de fin
lista[2:5]

# lista[:fin] -> desde la posicion 0 hasta un elemento antes de fin
lista[:6]

# lista[inicio:] -> desde inicio hasta un elemento antes el ultimo elemento
lista[4:]

# lista[:] -> todos los elementos
lista[:]

"""# Compresión de Listas

[más información](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions)
"""

lista = [i for i in range(10)]
lista

lista = [valor for valor in range(10) if valor % 2 == 0]
lista

import random

lista = [random.randint(-10, 10) for _ in range(20)]
lista

abs(-10)

num = 10
num = num if num >= 0 else abs(num)
num

"""# Compresion de Listas Anidadas"""

# Listas de listas o matrices
matriz = [[i * j for i in range(10)] for j in range(20)]
matriz

matriz = [[random.randint(0, 999) for i in range(10)] for j in range(20)]
matriz

"""```python
matriz[fila][columna]
```
"""

def mostrarMatriz(A):
    for fila in A:
        for columna in fila:
            if columna < 10:
                print('00' + str(columna), end='\t')
            elif 10 <= columna < 100:
                print('0' + str(columna), end='\t')
            else:
                print(columna, end='\t')
        print()

mostrarMatriz(matriz)

matriz[2][3]

matriz.pop()

matriz[-1]

matriz2 = matriz[:]
matriz[0][0] = -10
matriz2

matriz3 = matriz.copy()
matriz[0][0] = 100
matriz3

matriz4 = [fila.copy() for fila in matriz]
matriz[0][0] = 15
matriz4